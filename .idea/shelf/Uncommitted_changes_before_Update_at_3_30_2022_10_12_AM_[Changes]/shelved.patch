Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># PictureProjectTeam\r\nhttps://youtu.be/dPmZqsQNzGA\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 3286d721934052c7d894ba61d0497cd5369a6fe3)
+++ b/README.md	(date 1648649248339)
@@ -1,2 +1,4 @@
 # PictureProjectTeam
 https://youtu.be/dPmZqsQNzGA
+<br/>
+big shit
Index: src/card_game_resources/CardApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package card_game_resources;\r\nimport java.awt.Graphics2D;\r\nimport java.awt.Image;\r\nimport java.awt.image.BufferedImage;\r\nimport java.awt.image.ImageObserver;\r\n\r\nimport card_games.*;\r\nimport picture_project_resources.DigitalPicture;\r\nimport picture_project_resources.FlexiblePictureExplorer;\r\nimport picture_project_resources.Picture;\r\nimport picture_project_resources.Pixel;\r\n\r\npublic class CardApplication extends FlexiblePictureExplorer implements ImageObserver{\r\n\tpublic static final int HEIGHT = 800;\r\n\tpublic static final int WIDTH = 1200;\r\n\t\r\n\tGUI gui = new GUI();\r\n\tCardGame currentGame = new Solitaire(this);\r\n\t\r\n\tCoordinate mouseLocation = new Coordinate(0,0);\r\n\t\r\n\tpublic CardApplication() {\r\n\t\tsuper(new Picture(HEIGHT, WIDTH));\r\n\t\tdraw();\r\n\t}\r\n\t\r\n\tpublic void selectCard(Card c, Coordinate origin) {\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic void draw() {\r\n\t\tPicture display = new Picture(HEIGHT, WIDTH);\r\n\t\tGraphics2D graphics = display.createGraphics();\r\n\t\t\r\n\t\tgraphics.drawImage(new Picture(\"GameResources\\\\General\\\\table.png\").getBufferedImage(),0,0,this);\r\n\t\tif(currentGame.cardSelected()) currentGame.setSelectedCardLocation(mouseLocation);\r\n\t\tcurrentGame.draw(graphics, this);\r\n\r\n\t\tsetImage(display);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean imageUpdate(Image img, int infoflags, int x, int y, int width, int height) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\treturn false;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void mouseClickedAction(DigitalPicture pict, Pixel pix) {\r\n\t\tSystem.out.println(pix.getX() + \" \" + pix.getY());\r\n\t\tcurrentGame.mouseClickedAction(pict, pix);\r\n\t\tdraw();\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tCardApplication ca = new CardApplication();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void mouseDraggedAction(DigitalPicture pict, Pixel pix) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tmouseLocation = new Coordinate(pix.getX(), pix.getY());\r\n\t\tcurrentGame.mouseDraggedAction(pict, pix);\r\n\t\tdraw();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void mouseUpdateAction(boolean mouseDown, Pixel pix) {\r\n\t\tif(!mouseDown) {\r\n\t\t\tcurrentGame.returnSelectedCard(pix);\r\n\t\t}\r\n\t\tcurrentGame.mouseUpdateAction(mouseDown, pix);\r\n\t\tdraw();\r\n\t}\r\n\t\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/card_game_resources/CardApplication.java b/src/card_game_resources/CardApplication.java
--- a/src/card_game_resources/CardApplication.java	(revision 3286d721934052c7d894ba61d0497cd5369a6fe3)
+++ b/src/card_game_resources/CardApplication.java	(date 1648649340191)
@@ -1,7 +1,6 @@
 package card_game_resources;
 import java.awt.Graphics2D;
 import java.awt.Image;
-import java.awt.image.BufferedImage;
 import java.awt.image.ImageObserver;
 
 import card_games.*;
@@ -13,8 +12,8 @@
 public class CardApplication extends FlexiblePictureExplorer implements ImageObserver{
 	public static final int HEIGHT = 800;
 	public static final int WIDTH = 1200;
-	
-	GUI gui = new GUI();
+
+	//GUI gui = new GUI();
 	CardGame currentGame = new Solitaire(this);
 	
 	Coordinate mouseLocation = new Coordinate(0,0);
@@ -24,10 +23,6 @@
 		draw();
 	}
 	
-	public void selectCard(Card c, Coordinate origin) {
-		
-	}
-	
 	public void draw() {
 		Picture display = new Picture(HEIGHT, WIDTH);
 		Graphics2D graphics = display.createGraphics();
@@ -47,7 +42,6 @@
 
 	@Override
 	public void mouseClickedAction(DigitalPicture pict, Pixel pix) {
-		System.out.println(pix.getX() + " " + pix.getY());
 		currentGame.mouseClickedAction(pict, pix);
 		draw();
 	}
Index: src/card_games/Solitaire.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package card_games;\r\nimport java.awt.Graphics;\r\nimport java.awt.Graphics2D;\r\nimport java.awt.Image;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.image.ImageObserver;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport javax.swing.Timer;\r\n\r\nimport card_game_resources.*;\r\nimport picture_project_resources.*;\r\n\r\npublic class Solitaire implements CardGame, ImageObserver{\r\n\t\r\n\tprivate static final int xOrigin = 100;\r\n\tprivate static final int yOrigin = 100;\r\n\t\r\n\tprivate SolitairePlayer solitairePlayer = new SolitairePlayer(xOrigin, yOrigin);\r\n\tprivate Deck solitaireDeck = new SolitaireDeck(xOrigin, yOrigin);\r\n\t\r\n\tprivate DeckResetButton resetButton = new DeckResetButton(xOrigin + 30, yOrigin + 50);\r\n\tprivate SolveSolitaireButton solveButton = new SolveSolitaireButton(xOrigin + 200, yOrigin+100);\r\n\t\r\n\tprivate InteractableObject selectedCard = new Stack(0,0);// = new Card(Card.Suit.SPADES, Card.ACE, false);\r\n\tprivate boolean cardSelected = false;\r\n\tprivate Coordinate selectedCardLocation = new Coordinate(0,0);\r\n\tprivate boolean cardFromHand = false;\r\n\tprivate int cardStackOrigin = 0;\r\n\t\r\n\tprivate ArrayList<Stack> stacks = new ArrayList<Stack>();\r\n\t\r\n\tprivate SolitaireDropZone hearts = new SolitaireDropZone(xOrigin + 360, yOrigin + 50, Card.Suit.HEARTS);\r\n\tprivate SolitaireDropZone diamonds = new SolitaireDropZone(xOrigin + 470, yOrigin + 50, Card.Suit.DIAMONDS);\r\n\tprivate SolitaireDropZone spades = new SolitaireDropZone(xOrigin + 580, yOrigin + 50, Card.Suit.SPADES);\r\n\tprivate SolitaireDropZone clubs = new SolitaireDropZone(xOrigin + 690, yOrigin + 50, Card.Suit.CLUBS);\r\n\tprivate ArrayList<DropZone> dropZones = new ArrayList<DropZone>(Arrays.asList(hearts, diamonds, spades, clubs));\r\n\t\r\n\tprivate CardApplication container;\r\n\t\r\n\tpublic Solitaire(CardApplication ca){\r\n\t\tcontainer = ca;\r\n\t\tinitializeStacks();\r\n\t}\r\n\t\r\n\t\r\n\tpublic void initializeStacks() {\r\n\t\tfor(int i = 0; i < 7; i++) {\r\n\t\t\tstacks.add(new Stack(xOrigin + 30 + 110*i, yOrigin + 210));\r\n\t\t\tstacks.get(i).add(solitaireDeck.getTopCard());\r\n\t\t\tfor(int j = 0; j < i; j++) {\r\n\t\t\t\tCard drawnCard = solitaireDeck.getTopCard();\r\n\t\t\t\tdrawnCard.flip();\r\n\t\t\t\tstacks.get(i).add(drawnCard);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void drawCard(Player player) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\t\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void draw(Graphics2D graphics, ImageObserver io) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\t\r\n\t\tfor(DropZone d: dropZones) d.draw(graphics, io);\r\n\t\tfor(Stack s : stacks) s.draw(graphics, io);\r\n\t\tif(solveButton.isVisible()) System.out.println(\"A\");\r\n\t\tsolveButton.draw(graphics, io);\r\n\t\tresetButton.draw(graphics, io);\r\n\t\tsolitaireDeck.draw(graphics, io);\r\n\t\tsolitairePlayer.draw(graphics, io);\r\n\t\tif(cardSelected)\r\n\t\t\tselectedCard.draw(graphics, io, selectedCardLocation.getX()-Card.WIDTH/2, selectedCardLocation.getY()-Card.HEIGHT/2);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void reset() {\r\n\t\t// TODO Auto-generated method stub\r\n\t\t\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void mouseClickedAction(final DigitalPicture pict, final Pixel pix) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tif(solitaireDeck.wasClicked(pix) && solitaireDeck.size() > 0) {\r\n\t\t\tfor(int i = 0; i < 1; i++) {\r\n\t\t\t\tif(solitaireDeck.size() > 0)\r\n\t\t\t\t\tsolitairePlayer.addCard(solitaireDeck.getTopCard());\r\n\t\t\t\tsolitaireDeck.updateSize();\r\n\t\t\t}\t\r\n\t\t}\r\n\t\telse if(resetButton.wasClicked(pix)) {\r\n\t\t\tint iterations = solitairePlayer.handSize();\r\n\t\t\tfor(int i = 0; i < iterations; i++) {\r\n\t\t\t\tCard returningCard = solitairePlayer.getTopCard();\r\n\t\t\t\treturningCard.flip();\r\n\t\t\t\tsolitaireDeck.returnCard(returningCard);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(solveButton.wasClicked(pix) && solveButton.isVisible()) {\r\n\t\t\tthis.solve(pict, pix);\r\n\t\t}\r\n\t\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic void animate(DigitalPicture pict, Pixel pix) {\r\n\t\tfor(int i = 0; i < 100; i++) {\r\n\t    \tPixel p = new Pixel(pict, pix.getX(), pix.getY());\r\n\t    \tp = new Pixel(pict, pix.getX() + i, pix.getY() + i);\r\n\t\t\tcontainer.mouseDraggedAction(pict, p);\r\n\t\t\tSystem.out.println(selectedCardLocation + \" \" + i);\r\n\t\t\tcontainer.draw();\r\n\t\t\tSystem.out.println(i);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic int deckSize() {\r\n\t\treturn solitaireDeck.size();\r\n\t}\r\n\t\r\n\tpublic Card nthCard(int n) {\r\n\t\treturn solitaireDeck.nthCard(n);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean cardSelected() {\r\n\t\treturn cardSelected;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic InteractableObject selectedCard() {\r\n\t\treturn selectedCard;\r\n\t}\r\n\t\r\n\tpublic void selectCard(Card c) {\r\n\t\tselectedCard = c;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void mouseDraggedAction(DigitalPicture pict, Pixel pix) {\r\n\t\tif(!cardSelected && solitairePlayer.handSize() > 0 && solitairePlayer.wasClicked(pix)){\r\n\t\t\tselectedCard = solitairePlayer.getTopCard();\r\n\t\t\tcardSelected = true;\r\n\t\t\tcardFromHand = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor(Stack stack: stacks) {\r\n\t\t\t\tif(!cardSelected && stack.size() > 0 && stack.faceWasClicked(pix)){\r\n\t\t\t\t\tselectedCard = stack.getSelectedStack(pix);\r\n\t\t\t\t\tcardSelected = true;\r\n\t\t\t\t\tcardFromHand = false;\r\n\t\t\t\t\tcardStackOrigin = stacks.indexOf(stack);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void returnSelectedCard(Pixel pix) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tif(cardSelected) {\r\n\t\t\tint stackIndex = overStack(pix);\r\n\t\t\tint dropZoneIndex = overDropZone(pix);\r\n\t\t\t\r\n\t\t\tboolean dropped = false;\r\n\t\t\tif(dropZoneIndex != -1) {\r\n\t\t\t\tDropZone dropZone = dropZones.get(dropZoneIndex);\r\n\t\t\t\tif(cardFromHand) {\r\n\t\t\t\t\tif(dropZone.validDrop((Card) selectedCard)) {\r\n\t\t\t\t\t\tdropZone.addCard((Card) selectedCard);\r\n\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\telse\r\n\t\t\t\t\tif(((Stack) selectedCard).size() == 1) {\r\n\t\t\t\t\t\tCard convertedStack = ((Stack) selectedCard).nthCard(0);\r\n\t\t\t\t\t\tif(dropZone.validDrop(convertedStack)) {\r\n\t\t\t\t\t\t\tdropZone.addCard(convertedStack);\r\n\t\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t\t\tif(stacks.get(cardStackOrigin).getNumberOfFaceUpCards() == 0)\r\n\t\t\t\t\t\t\t\tstacks.get(cardStackOrigin).flipNewCard();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif(!dropped) {\r\n\t\t\t\tif(stackIndex!=-1 && checkAddLegality(stackIndex)) {\r\n\t\t\t\t\tif(cardFromHand)\r\n\t\t\t\t\t\tstacks.get(stackIndex).add((Card) selectedCard);\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstacks.get(stackIndex).add((Stack) selectedCard);\r\n\t\t\t\t\t\tif(stackIndex != cardStackOrigin && stacks.get(cardStackOrigin).getNumberOfFaceUpCards() == 0)\r\n\t\t\t\t\t\t\tstacks.get(cardStackOrigin).flipNewCard();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if(cardFromHand) {\r\n\t\t\t\t\tsolitairePlayer.returnCard((Card) selectedCard);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t\r\n\t\t\t\t\tstacks.get(cardStackOrigin).add((Stack) selectedCard);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcardSelected = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate int overStack(Pixel pix) {\r\n\t\tint pixelOverStackIndex = -1;\r\n\t\tfor(int i = 0; i < stacks.size() && pixelOverStackIndex == -1; i++) {\r\n\t\t\tif(stacks.get(i).wasClicked(pix))\r\n\t\t\t\tpixelOverStackIndex = i;\r\n\t\t}\r\n\t\treturn pixelOverStackIndex;\r\n\t}\r\n\t\r\n\tprivate int overDropZone(Pixel pix) {\r\n\t\tint pixelOverDropZone = -1;\r\n\t\tfor(int i = 0; i < dropZones.size() && pixelOverDropZone == -1; i++) {\r\n\t\t\tif(dropZones.get(i).wasClicked(pix)) \r\n\t\t\t\tpixelOverDropZone = i;\r\n\t\t}\r\n\t\treturn pixelOverDropZone;\r\n\t}\r\n\t\r\n\t\r\n\tprivate boolean checkAddLegality(int stackIndex) {\r\n\t\tCard reference;\r\n\t\tif(cardFromHand)\r\n\t\t\treference = (Card) selectedCard;\r\n\t\telse\r\n\t\t\treference = ((Stack) selectedCard).nthCard(0);\r\n\r\n\t\t\r\n\t\tCard stackTop = stacks.get(stackIndex).nthCard(stacks.get(stackIndex).size()-1);\r\n\t\tboolean legal = false;\r\n\t\tif(stackTop.suit() == Card.Suit.NULL && reference.value() == Card.KING) {\r\n\t\t\tlegal = true;\r\n\t\t}\r\n\t\telse if(stackTop.value() == reference.value() + 1) {\r\n\t\t\tif(stackTop.suit() == Card.Suit.CLUBS || stackTop.suit() == Card.Suit.SPADES) {\r\n\t\t\t\tif(reference.suit() == Card.Suit.DIAMONDS || reference.suit() == Card.Suit.HEARTS) {\r\n\t\t\t\t\tlegal = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(stackTop.suit() == Card.Suit.DIAMONDS || stackTop.suit() == Card.Suit.HEARTS) {\r\n\t\t\t\tif(reference.suit() == Card.Suit.CLUBS || reference.suit() == Card.Suit.SPADES) {\r\n\t\t\t\t\tlegal = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\treturn legal;\r\n\t}\r\n\t\r\n\tpublic void solve(final DigitalPicture pict, final Pixel pix) {\r\n\t\tThread t = new Thread() {\r\n\t\t\tpublic void run(){\r\n\t\t\t\tint totalNumberOfCards = getTotalStackSize();\r\n\t\t\t\tfor(int i = 0; i < totalNumberOfCards; i++)\r\n\t\t\t      solveSmallestCard(pict, pix);\r\n\t\t\t}\r\n\t\t};\r\n\t\tt.start();\r\n\t}\r\n\t\r\n\tpublic void solveSmallestCard(DigitalPicture pict, Pixel pix) {\r\n\t\t\r\n\t\tCard smallestCard = findSmallestCard();\r\n\t\tCoordinate cardPosition = smallestCard.getCenterPoint();\r\n\t\tCoordinate destination;\r\n\t\t\r\n\t\tSystem.out.println(smallestCard);\r\n\t\t\r\n\t\tswitch (smallestCard.suit()) {\r\n\t\t\tcase CLUBS:\r\n\t\t\t\tdestination = clubs.getCenterPoint();\r\n\t\t\t\tbreak;\r\n\t\t\tcase DIAMONDS:\r\n\t\t\t\tdestination = diamonds.getCenterPoint();\r\n\t\t\t\tbreak;\r\n\t\t\tcase HEARTS:\r\n\t\t\t\tdestination = hearts.getCenterPoint();\r\n\t\t\t\tbreak;\r\n\t\t\tcase SPADES:\r\n\t\t\t\tdestination = spades.getCenterPoint();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tdestination = new Coordinate(0,0);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t\tint movementSpeed = 20;\r\n\t\tint distance = cardPosition.getDistanceTo(destination);\r\n\t\tint numberOfFrames = distance/movementSpeed;\r\n\t\tint horizontalDistance = destination.getX() - cardPosition.getX();\r\n\t\tint verticalDistance = destination.getY() - cardPosition.getY();\r\n\t\t\r\n\t\tfor(int j = 0; j < numberOfFrames; j++) {\r\n\t\t\tPicture display = new Picture(HEIGHT, WIDTH);\r\n\t\t\tGraphics2D graphics = display.createGraphics();\r\n\t\t\t\r\n\t\t\tgraphics.drawImage(new Picture(\"GameResources\\\\General\\\\table.png\").getBufferedImage(),0,0,this);\r\n\t\t\t\r\n\t\t\tpix = new Pixel(display, cardPosition.getX() + j*(int) (movementSpeed * horizontalDistance/distance) + xOrigin, cardPosition.getY() + j*(int) (movementSpeed * verticalDistance/distance) + yOrigin);\r\n\t\t\tSystem.out.println(pix.getX() + \" \" + pix.getY());\r\n\t\t\tcontainer.mouseDraggedAction(display, pix);\r\n\t\t\t/*\r\n\t\t\tgraphics.drawImage(new Picture(\"GameResources\\\\General\\\\solve_button.png\").getBufferedImage(), pix.getX(), pix.getY(), this);\r\n\t\t\tthis.draw(graphics, container);\r\n\t\t\tcontainer.setImage(display);\r\n\t\t\t*/\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate Card findSmallestCard() {\r\n\t\tArrayList<Card> topCards = new ArrayList<Card>();\r\n\t\tfor(Stack s: stacks) {\r\n\t\t\ttopCards.add(s.nthCard(s.size()-1));\r\n\t\t}\r\n\t\t\r\n\t\tint smallestCardIndex = 0;\r\n\t\tint smallestCardValue = 14;\r\n\t\tfor(Card c: topCards) {\r\n\t\t\tif(c.value() < smallestCardValue && c.suit() != Card.Suit.NULL) {\r\n\t\t\t\tsmallestCardValue = c.value();\r\n\t\t\t\tsmallestCardIndex = topCards.indexOf(c);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tCard smallestCard = topCards.get(smallestCardIndex);\r\n\t\treturn smallestCard;\r\n\t}\r\n\t\r\n\tprivate int getTotalStackSize() {\r\n\t\tint numberOfCards = 0;\r\n\t\tfor(Stack s: stacks) {\r\n\t\t\tnumberOfCards += s.size()-1;\r\n\t\t}\r\n\t\treturn numberOfCards;\r\n\t}\r\n\t@Override\r\n\tpublic void setSelectedCardLocation(Coordinate c) {\r\n\t\tselectedCardLocation = c;\r\n\t}\r\n\t\r\n\tpublic void mouseUpdateAction(boolean mouseDown, Pixel pix) {\r\n\t\tif(solitaireDeck.size() == 0 && solitairePlayer.handSize() == 0 && !solveButton.isVisible()) {\r\n\t\t\tsolveButton.switchVisibility();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t@Override\r\n\tpublic boolean imageUpdate(Image img, int infoflags, int x, int y, int width, int height) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\treturn false;\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/card_games/Solitaire.java b/src/card_games/Solitaire.java
--- a/src/card_games/Solitaire.java	(revision 3286d721934052c7d894ba61d0497cd5369a6fe3)
+++ b/src/card_games/Solitaire.java	(date 1648649248327)
@@ -69,7 +69,6 @@
 		
 		for(DropZone d: dropZones) d.draw(graphics, io);
 		for(Stack s : stacks) s.draw(graphics, io);
-		if(solveButton.isVisible()) System.out.println("A");
 		solveButton.draw(graphics, io);
 		resetButton.draw(graphics, io);
 		solitaireDeck.draw(graphics, io);
@@ -238,7 +237,6 @@
 		else
 			reference = ((Stack) selectedCard).nthCard(0);
 
-		
 		Card stackTop = stacks.get(stackIndex).nthCard(stacks.get(stackIndex).size()-1);
 		boolean legal = false;
 		if(stackTop.suit() == Card.Suit.NULL && reference.value() == Card.KING) {
@@ -278,7 +276,9 @@
 		Coordinate destination;
 		
 		System.out.println(smallestCard);
-		
+
+
+
 		switch (smallestCard.suit()) {
 			case CLUBS:
 				destination = clubs.getCenterPoint();
@@ -306,7 +306,7 @@
 		for(int j = 0; j < numberOfFrames; j++) {
 			Picture display = new Picture(HEIGHT, WIDTH);
 			Graphics2D graphics = display.createGraphics();
-			
+			graphics.drawImage(new Picture("GameResources\\CardResources\\face.png").getBufferedImage(), cardPosition.getX(), cardPosition.getY(),this);
 			graphics.drawImage(new Picture("GameResources\\General\\table.png").getBufferedImage(),0,0,this);
 			
 			pix = new Pixel(display, cardPosition.getX() + j*(int) (movementSpeed * horizontalDistance/distance) + xOrigin, cardPosition.getY() + j*(int) (movementSpeed * verticalDistance/distance) + yOrigin);
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"92a8d00a-ae30-482f-9dee-678ac7702e4c\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"26pkzGVsfzTS3Z2GHDBvjnQOOIi\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"project.propVCSSupport.CommitDialog\" />\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"CardApplication\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"card_game_resources.CardApplication\" />\r\n      <module name=\"PictureProjectTeam\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"92a8d00a-ae30-482f-9dee-678ac7702e4c\" name=\"Changes\" comment=\"\" />\r\n      <created>1648128177572</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1648128177572</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3286d721934052c7d894ba61d0497cd5369a6fe3)
+++ b/.idea/workspace.xml	(date 1648649248419)
@@ -1,16 +1,32 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="92a8d00a-ae30-482f-9dee-678ac7702e4c" name="Changes" comment="" />
-    <option name="SHOW_DIALOG" value="false" />
+    <list default="true" id="92a8d00a-ae30-482f-9dee-678ac7702e4c" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/card_games/Solitaire.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/card_games/Solitaire.java" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="true" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="true" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="GitSEFilterConfiguration">
+    <file-type-list>
+      <filtered-out-file-type name="LOCAL_BRANCH" />
+      <filtered-out-file-type name="REMOTE_BRANCH" />
+      <filtered-out-file-type name="TAG" />
+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
+    </file-type-list>
+  </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
   </component>
   <component name="ProjectId" id="26pkzGVsfzTS3Z2GHDBvjnQOOIi" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
@@ -18,10 +34,12 @@
   <component name="PropertiesComponent">
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
-    <property name="settings.editor.selected.configurable" value="project.propVCSSupport.CommitDialog" />
+    <property name="settings.editor.selected.configurable" value="project.propVCSSupport.ChangelistConflict" />
   </component>
   <component name="RunManager">
     <configuration name="CardApplication" type="Application" factoryName="Application">
+      <option name="ALTERNATIVE_JRE_PATH" value="corretto-1.8" />
+      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
       <option name="MAIN_CLASS_NAME" value="card_game_resources.CardApplication" />
       <module name="PictureProjectTeam" />
       <method v="2">
@@ -40,4 +58,15 @@
     </task>
     <servers />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
 </project>
\ No newline at end of file
